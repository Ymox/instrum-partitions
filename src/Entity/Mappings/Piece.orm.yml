App\Entity\Piece:
  type: entity
  table: null
  repositoryClass: App\Repository\PieceRepository
  id:
    id:
      type: float
      id: true
      generator:
        strategy: AUTO

  fields:
    name:
      type: string
      length: 255
    translation:
      type: string
      length: 255
      nullable: true
    level:
      type: float
      nullable: true
    year:
      type: smallint
      nullable: true
    reference:
      type: string
      length: 255
      nullable: true
      unique: true
    note:
      type: text
      nullable: true
    createdAt:
      type: datetime
      gedmo:
        timestampable:
          on: create

  oneToMany:
    movements:
      targetEntity: App\Entity\Piece
      mappedBy: work
      cascade:
        - persist
    parts:
      targetEntity: App\Entity\Part
      mappedBy: piece
      fetch: EXTRA_LAZY
      orphanRemoval: true
      cascade:
        - persist
      orderBy:
        solo: DESC
        instrument: ASC
        number: ASC
    missings:
      targetEntity: App\Entity\Missing
      mappedBy: piece
      fetch: EXTRA_LAZY
      orphanRemoval: true
      cascade:
        - persist

  manyToOne:
    publisher:
      targetEntity: App\Entity\Publisher
      inversedBy: pieces
      cascade:
        - persist
        - remove
    size:
      targetEntity: App\Entity\Size
      inversedBy: pieces
      cascade:
        - persist
      joinColumn:
        name: size
        referencedColumnName: name
    status:
      targetEntity: App\Entity\Status
      inversedBy: pieces
      cascade:
        - persist
    instrumentation:
      targetEntity: App\Entity\Instrumentation
      inversedBy: pieces
      cascade:
        - persist
    type:
      targetEntity: App\Entity\Type
      inversedBy: pieces
      cascade:
        - persist
    program:
      targetEntity: App\Entity\Program
      inversedBy: pieces
      orderBy: { updatedAt: 'DESC' }
    work:
      targetEntity: App\Entity\Piece
      inversedBy: movements
      orderBy: { id: 'ASC' }

  manyToMany:
    composers:
      targetEntity: App\Entity\Person
      inversedBy: compositions
      cascade:
        - persist
      joinTable:
        name: piece_composer
    arrangers:
      targetEntity: App\Entity\Person
      inversedBy: arrangements
      cascade:
        - persist
      joinTable:
        name: piece_arranger
    concerts:
      targetEntity: App\Entity\Concert
      mappedBy: pieces
      orderBy: { "date": 'DESC' }
    lendings:
      targetEntity: App\Entity\Lending
      mappedBy: pieces
      orderBy: { start: DESC }

  lifecycleCallbacks: {  }